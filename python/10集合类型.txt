1>:组合数据类型
    1>>:集合类型定义
        ===>集合是多个元素的无序组合
        ===>集合类型与数学中的集合概念一致
        ===> 集合元素之间无序，每个元素唯一，不能存在相同的元素
        ===> 集合用大括号表示，元素用逗号分隔
        ===> 建立集合类型用{}或set()  ===> a= {"python",123 ,("python",123)}
                                    ===> b = set("ppy12345") ===>{"1","2""3","p","5","4","y"}

    2>>:集合操作符
        ===> 操作符 s|t 返回一个新的集合，包括在两个集合中所有的元素
        ===> 操作符 S-T 返回一个新的集合，包括在集合S中的元素，但是不包括在T中的元素
        ===> 操作符 S&T 返回一个新的集合，包括同时在两个集合中都出现的元素
        ===> 操作符 S^T 返回一个新的集合，包括集合S和T中的非相同元素
        ===> <=  >=  <  > 返回True False
        ===> 增强型操作符
            ===> S |= T 更新集合S, 包括集合S和T中所有的元素
            ===> s -= T 更新集合S, 包括在集合S中，但是不在T中的元素
            ===> s &= T 更新集合S, 包括同时在集合S和T中的元素
            ===> S ^= T 更新集合S, 包括集合S和集合T中非相同的元素


    3>>:集合处理方法
        ===> S.add(x) 如果x不在集合中，将x增加到S
        ===> S.discard(x) 移除S中的x，如果x不在集合S中也不会报错
        ===> S.remove(x) 移除S中元素x,如果x不在集合S中，会产生KeyError异常
        ===> S.clear() 移除S中所有的元素
        ===> S.pop() 随机返回S的一个元素，更新S，若S为空产生KeyError异常


2>序列的类型及操作
    1>>序列类型定义
        ===> 序列是具有先后关系的一组元素
        ===> 序列是一位元素向量，元素类型可以不同
        ===> 类似于数学元素序列
        ===> 字符串类型 ===> 元组类型  ===> 列表类型
    2>>序列处理函数及方法
        ===> 序列类型通用操作符
            ===> x in s   如果x是序列s的元素，返回True  否则返回False
            ===> x not in s  如果x是序列s的元素，返回False 否则返回True
            ===> s + t 连接两个序列 s和 t
            ===> s * n   或 n*s  ====>将序列s复制n次
            ===> s[i]  索引 ，返回s中的第i个元素，i是序列的序号
            ===> s[start:end ]或者 s[start:end:interval] ===>切片, 返回序列中第i到j以interval为步长的子序列

            ===>len(s) 返回序列s的长度
            ===>min(s)  max(s) 返回序列s中的最小(大)元素，s中元素需要可比较
            ===> s.index(x) 或者 s.index(x, i , j )  返回序列s从i开始到j位置中第一次出现元素x的位置

    3>>元组类型及操作
        ===> 元组是序列类型的一种扩展
        ===> 元组一旦被创建，就不能被修改
        ===> 使用小括号（） 或者tuple() 创建，元素间用逗号，分隔
        ===> 可以使用或者不适使小括号 creature = "cat","dog","tiger","human"

        ===> 元组继承了序列类型的去哪不通用操作
        ===> 元组因为创建后不能修改，因此没有特殊的操作


    4>>列表的类型及操作
        ===>列表是一种序列类型，创建后可以被随意的修改
        ===>ls[i]=x 替换ls列表中第i个元素
        ===>ls[i:j,k] = lt 用列表lt替换ls切片后所对应元素字列表
        ===>del ls[i] 删除列表ls中第i个元素
        ===> del ls[i:j:k] 删除ls列表中第i到第j以k为步长的元素
        ===> ls += lt
        ===> ls *= n

        ===> ls.append(x)
        ===> ls.copy()
        ===> ls.insert(i,x)
        ===> ls.remove(x)
        ===> ls.reverse()


    5>>序列类型应用场景


3>字典类型及操作
    ===> 字典类型定义
        映射是一种键（索引）和值（数据）的对应
        d = {"中国": "北京" ,"美国":"华盛顿","法国":"巴黎"}

    ===> 字典处理函数及方法
        d[k] = v 向字典中添加元素 
        del d[k] 删除字典d中键k对应的数据值
        k in k   判断键K是否在字典d中，如果在返回True,否则返回False
        d.keys() 返回字典d中所有的键信息
        d.values() 返回字典d中所有的值信息
        d.items() 返回字典d中所有的键值对信息
        d.get(k,<default>) 返回键k对应的值, 不存在则返回<default>值
        d.pop(k,<default>) k键存在，则取出相对应的值，不存在则返回<default>值
        d.popitem() 随机的从字典d中取出一个键值对，以元组的形式返回
        d.clean() 删除所有的键值对
        len(d) 返回字典元素的个数
    ===> 字典类型应用场景


